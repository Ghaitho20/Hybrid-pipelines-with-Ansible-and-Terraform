pipeline {
  agent any

  parameters {
    string(name: 'VM_IP', defaultValue: '', description: 'IP of the Azure VM')
  }

  options {
    disableConcurrentBuilds()
  }

  environment {
    SSH_KEY_CRED = 'SSH_KEY_FILE'
  }

  stages {
    stage('Checkout') {
      steps { checkout scm }
    }

    stage('SSH Deploy to Azure VM') {
      steps {
        withCredentials([file(credentialsId: env.SSH_KEY_CRED, variable: 'SSH_KEY_FILE')]) {
          lock(resource: "vm-deploy-${params.VM_IP}") {
            script {
              def ip = params.VM_IP
              sh """
              chmod 600 "$SSH_KEY_FILE"

              ssh -o StrictHostKeyChecking=no -i "$SSH_KEY_FILE" azureuser@$ip "
                if [ -d ~/project ]; then
                    cd ~/project && git pull
                else
                    git clone https://github.com/your-username/your-repo.git ~/project
                fi

                cd ~/project

                sudo docker compose down || true
                sudo docker compose up -d
              "
            """

          }
        }
      }
    }


    stage('Verify') {
      steps {
        withCredentials([file(credentialsId: 'SSH_KEY_FILE', variable: 'SSH_KEY_FILE')]) {
          script {
            def ip = params.VM_IP
            sh """
              echo "Verifying VM $ip..."

              # Check SSH connectivity
              ssh -o StrictHostKeyChecking=no -i ${SSH_KEY_FILE} azureuser@$ip "echo 'SSH connection OK'"

              # Check Docker service
              ssh -o StrictHostKeyChecking=no -i ${SSH_KEY_FILE} azureuser@$ip "sudo systemctl is-active docker"

              # List Docker containers
              ssh -o StrictHostKeyChecking=no -i ${SSH_KEY_FILE} azureuser@$ip "docker ps --format 'table {{.Names}}\\t{{.Status}}'"
              
              echo "Verification finished."
            """

          }
        }
      }
    }

  }
} 
}
