name: Build, Test, and Deploy Locally

on:
  push:
    branches: [master]
  workflow_dispatch:

jobs:
  # ======================
  # Build Backend & Frontend
  # =====================
  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
          registry: docker.io

      - name: Build backend docker image
        run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/paris-backend:latest ./backend

      - name: Scan backend image with Trivy (LOCAL)
        uses: aquasecurity/trivy-action@0.18.0
        with:
          image-ref: ${{ secrets.DOCKERHUB_USERNAME }}/paris-backend:latest  # Local image
          format: 'table'
          exit-code: 1
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

      - name: Push backend docker image (only if scan passes)
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/paris-backend:latest

      - name: Build frontend docker image
        run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/paris-frontend:latest ./frontend

      - name: Scan frontend image with Trivy (LOCAL)
        uses: aquasecurity/trivy-action@0.18.0
        with:
          image-ref: ${{ secrets.DOCKERHUB_USERNAME }}/paris-frontend:latest  # Local image
          format: 'table'
          exit-code: 1
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

      - name: Push frontend docker image (only if scan passes)
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/paris-frontend:latest

      

  # ======================
  # Run backend tests
  # ======================
  backend-tests:
    name: Run Backend API Tests
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      - name: Install backend dependencies
        run: |
          pip install -r backend/requirements.txt

      - name: Run backend tests
        run: |
          cd ./backend/app
          pytest test_app.py
          pytest test_etl.py


  # ======================
  # Run docker-compose to verify services
  # ======================
  docker-compose-test:
    name: Test Docker Compose
    runs-on: ubuntu-latest
    needs: backend-tests
    services:
      docker:
        image: docker:24.0.5-dind
        options: --privileged --network host
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}

      - name: Pull and start services
        run: |
          docker compose -f docker-compose.yml pull
          docker compose -f docker-compose.yml up -d
          docker ps

      - name: Wait for Backend API to be healthy
        run: |
          echo "Waiting for backend service to be healthy..."
          until curl -f http://localhost:5000/health; do
            echo "Backend not ready yet, waiting..."
            sleep 5
          done
          echo "Backend is healthy!"


  # # ======================
  # # Trigger Jenkins Pipelines
  # # ======================
  # trigger-jenkins:
  #   name: Trigger Jenkins CD Pipelines
  #   runs-on: ubuntu-latest
  #   needs: docker-compose-test
  #   steps:
  #     - name: Trigger Jenkins Pipeline-1
  #       env:
  #         JENKINS_USER: ${{ secrets.JENKINS_USER }}
  #         JENKINS_API_TOKEN: ${{ secrets.JENKINS_API_TOKEN }}
  #         JENKINS_URL: ${{ secrets.JENKINS_URL }}
  #       run: |
  #         curl -X POST "${JENKINS_URL}/job/Pipeline-1/build?token=trigger-token" \
  #         --user "$JENKINS_USER:$JENKINS_API_TOKEN"

  #     - name: Trigger Jenkins Pipeline-2
  #       env:
  #         JENKINS_USER: ${{ secrets.JENKINS_USER }}
  #         JENKINS_API_TOKEN: ${{ secrets.JENKINS_API_TOKEN }}
  #         JENKINS_URL: ${{ secrets.JENKINS_URL }}
  #       run: |
  #         curl -X POST "${JENKINS_URL}/job/Pipeline-2/build?token=trigger-token" \
  #         --user "$JENKINS_USER:$JENKINS_API_TOKEN"

  #     - name: Trigger Jenkins Pipeline-3
  #       env:
  #         JENKINS_USER: ${{ secrets.JENKINS_USER }}
  #         JENKINS_API_TOKEN: ${{ secrets.JENKINS_API_TOKEN }}
  #         JENKINS_URL: ${{ secrets.JENKINS_URL }}
  #       run: |
  #         curl -X POST "${JENKINS_URL}/job/Pipeline-3/build?token=trigger-token" \
  #         --user "$JENKINS_USER:$JENKINS_API_TOKEN"
